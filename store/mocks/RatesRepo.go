// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ArenDjango/golang-test-task/model"
	mock "github.com/stretchr/testify/mock"
)

// RatesRepo is an autogenerated mock type for the RatesRepo type
type RatesRepo struct {
	mock.Mock
}

// CreateRate provides a mock function with given fields: ctx, rate
func (_m *RatesRepo) CreateRate(ctx context.Context, rate *model.DBRates) (*model.DBRates, error) {
	ret := _m.Called(ctx, rate)

	if len(ret) == 0 {
		panic("no return value specified for CreateRate")
	}

	var r0 *model.DBRates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DBRates) (*model.DBRates, error)); ok {
		return rf(ctx, rate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.DBRates) *model.DBRates); ok {
		r0 = rf(ctx, rate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DBRates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.DBRates) error); ok {
		r1 = rf(ctx, rate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRatesRepo creates a new instance of RatesRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatesRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatesRepo {
	mock := &RatesRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
